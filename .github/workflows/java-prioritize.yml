name: Mend Java Prioritize

on:
  workflow_call:

jobs:
  mendscan:
    env:
      GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}
      GITHUB_USER: ${{github.actor}}
      WS_APIKEY: ${{secrets.PROD_MEND_APIKEY}}
      WS_USERKEY: ${{secrets.PROD_MEND_USERKEY}}
      WS_PRODUCTNAME: ${{github.event.repository.name}}
      WS_PROJECTNAME: ${{github.event.repository.name}}_${{github.ref_name}}
      WS_WSS_URL: https://saas.mend.io/agent

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3

    - name: Set up JDK
      uses: actions/setup-java@v3
      with:
        java-version: '11'
        distribution: 'adopt'

    - name: Build with Maven
      run: mvn clean install -s settings.xml
      
    - name: Mend Unified Agent Scan
      env:
        WS_ENABLEIMPACTANALYSIS: true
        WS_RESOLVEALLDEPENDENCIES: false
        WS_MAVEN_RESOLVEDEPENDENCIES: true
        WS_MAVEN_AGGREGATEMODULES: true
        WS_GENERATEPROJECTDETAILSJSON: true
      run: |
        echo Downloading Mend Unified Agent
        curl -LJO https://unified-agent.s3.amazonaws.com/wss-unified-agent.jar
        if [[ "$(curl -sL https://unified-agent.s3.amazonaws.com/wss-unified-agent.jar.sha256)" != "$(sha256sum wss-unified-agent.jar)" ]]
        then
          echo "Integrity Check Failed"
        else
          echo "Integrity Check Passed"
          echo Starting Unified Agent Scan
          WARFILE=$(find ./ -type f -wholename "*/target/*.war")
          if [ -z "$WARFILE" ]
          then
            JARFILE=$(find ./ -type f -wholename "*/target/*.jar")
            echo $JARFILE will be added to appPath
            java -jar wss-unified-agent.jar -appPath $JARFILE -d ./
          else
            echo $WARFILE will be added to appPath
            java -jar wss-unified-agent.jar -appPath $WARFILE -d ./
          fi
        fi

    - name: Check Project State
      run: |
        curl -LJO https://raw.githubusercontent.com/mend-toolkit/mend-examples/main/Scripts/check-project-state.sh
        chmod +x check-project-state.sh && ./check-project-state.sh

    - name: Mend Report Generation
      run: |
        export WS_PROJECTTOKEN=$(jq -r '.projects | .[] | .projectToken' ./whitesource/scanProjectDetails.json)
        export WS_URL=$(echo $WS_WSS_URL | awk -F "agent" '{print $1}')
        curl -o ./whitesource/riskreport.pdf -X POST "${WS_URL}/api/v1.3" -H "Content-Type: application/json"  -d '{"requestType":"getProjectRiskReport","userKey":"'${WS_USERKEY}'","projectToken":"'${WS_PROJECTTOKEN}'"}'
        curl -o ./whitesource/inventoryreport.xlsx -X POST "${WS_URL}/api/v1.3" -H "Content-Type: application/json"  -d '{"requestType":"getProjectInventoryReport","userKey":"'${WS_USERKEY}'","projectToken":"'${WS_PROJECTTOKEN}'"}'
        curl -o ./whitesource/duediligencereport.xlsx -X POST "${WS_URL}/api/v1.3" -H "Content-Type: application/json"  -d '{"requestType":"getProjectDueDiligenceReport","userKey":"'${WS_USERKEY}'","projectToken":"'${WS_PROJECTTOKEN}'"}'
        curl -o ./whitesource/spdxreport.json -X POST "${WS_URL}/api/v1.3" -H "Content-Type: application/json"  -d '{"requestType":"getProjectSpdxReport","userKey":"'${WS_USERKEY}'","projectToken":"'${WS_PROJECTTOKEN}'","format":"json"}'

    - name: 'Upload WhiteSource folder'
      uses: actions/upload-artifact@v2
      with:
        name: WhiteSource
        path: whitesource
        retention-days: 1
    - name: 'Upload WhiteSource folder if failure'
      uses: actions/upload-artifact@v2
      if: failure()
      with:
        name: WhiteSource
        path: whitesource
        retention-days: 1